#!/usr/bin/python
import os,sys, argparse, datetime, sqlite3                   # Importing the required modules
from influxdb import InfluxDBClient     # Importing the influxdb client module
DB_NAME = 'agsbackup'                   # Database name
DB_SERVER = 'localhost'                 # Server Name
DB_PORT = '8086' 			# INFLUX DB PORT
DB_USER = 'icingauser' 			# INFLUX DB USERNAME
DB_PASSWD = 'icinga@123'		# INFLUX DB PASSWORD
DB_MEASUREMENT = 'drive_info'		# MEASUREMENT
client = InfluxDBClient(DB_SERVER, DB_PORT, DB_USER, DB_PASSWD, DB_NAME) # Influx DB connection
MYDICT =  {}
SQLITE_DB = 'arista.db'                 # SQL LITE DB
now = datetime.datetime.now()
jsonBody = []

# CREATING THE JSON AND PUSHING THE DATA POINTS
def writePoint(MYDICT):
   json_body = {
                "measurement": DB_MEASUREMENT,
                "tags": {
                    "target": MYDICT['target']
                },
                "time": MYDICT['startTime'],
                "fields": {
                    "files": MYDICT['files'],
                    "bytes": MYDICT['nmbytes'],
                    "duration": MYDICT['duration']
                }
        }
   return json_body

# FUNCTION TO CALCULATE THE DURATION
def calTimeDifference(starttime, endtime):
    start_dt = datetime.datetime.strptime(starttime, '%Y-%m-%d %H:%M:%S') 
    end_dt = datetime.datetime.strptime(endtime, '%Y-%m-%d %H:%M:%S')
    diff = (end_dt - start_dt)
    return (diff.days * 24 * 60 * 60) + (diff.seconds / 60)

# FUNCTION THAT CAN BE CALLED FROM DIFFERENT FILE TO PUSH THE DATA POINTS
def addBackupPoint(target, files, size, startTime, endTime):
  MYDICT['duration'] = calTimeDifference(startTime,endTime)
  MYDICT['target'] = target
  MYDICT['files'] = files
  MYDICT['nmbytes'] = size
  MYDICT['startTime'] = (datetime.datetime.strptime(startTime, '%Y-%m-%d %H:%M:%S')).strftime("%Y-%m-%dT%H:%M:%SZ")
  jsonBody.append(writePoint(MYDICT))
  client.write_points(jsonBody)

# Function for passing the correct option and get the option values
def getArgs():
    parser = argparse.ArgumentParser(
        description='Script for taking the required data and pushing the influxdb')
    parser.add_argument(
        '-t', '--target', type=str, help='End target')
    parser.add_argument(
        '-f', '--files', type=int, help='Number of files')
    parser.add_argument(
        '-b', '--nmbytes', type=int, help='Number of bytes')
    parser.add_argument(
        '-d', '--duration', type=int, help='Duration')
 
    args = parser.parse_args()
    return args

# Checking whether the lenght of argv
if len(sys.argv) > 1:
    ret_val = getArgs()
    MYDICT['target'] = ret_val.target
    MYDICT['files'] = ret_val.files
    MYDICT['nmbytes'] = ret_val.nmbytes
    MYDICT['duration'] = ret_val.duration
    MYDICT['startTime'] = now.strftime("%Y-%m-%dT%H:%M:%SZ")
    jsonBody.append(writePoint(MYDICT))
    client.write_points(jsonBody)

# Fuction to push the data to Influx for UPLOADED record in SQLITE3 is 0
def sqlWriteInfluxDb():
  jsonList = []
  if os.path.isfile(SQLITE_DB):				# Checking for the SQLITE DB
   conn = sqlite3.connect(SQLITE_DB)
  else:
   print "DB not present"
   sys.exit()
  cursor = conn.execute("select * from drive_info where NOT uploaded;") # Sqlite data
  for row in cursor:
     MYDICT['target'] = row[1]
     MYDICT['files'] = row[2]
     MYDICT['nmbytes'] = row[3]
     MYDICT['duration'] = calTimeDifference(row[4],row[5])
     MYDICT['startTime'] = (datetime.datetime.strptime(row[4], '%Y-%m-%d %H:%M:%S')).strftime("%Y-%m-%dT%H:%M:%SZ")
     jsonCall = writePoint(MYDICT) 
     jsonList.append(jsonCall)
   
  client.write_points(jsonList)    # Calling influxDB API once for the json_list 
  conn.execute("update drive_info set uploaded=1 where uploaded=0;")
  conn.commit()
